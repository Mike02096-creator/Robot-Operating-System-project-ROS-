<?xml version="1.0" encoding="UTF-8"?>

<!-- Ce fichier lance le robot burger dans le monde correspondant au challenge 2 tache 2.
Il mets ensuite en route le noeud permettant au robot de réaliser ce challenge : Maintenir une distance constante avec le mur en mouvement en face de lui.

Rq 1 : Les paramètres et arguments peuvent bien sûr tous être modifiés, cependant ceux réellement déstinés à être modifiables par l'utilisateur (sans provoquer de potentielles erreures) sont signalés par l'indication : Paramètre utilisateur. 

Rq 2 : L'imprévisibilité de la simulation peu parfois produire un comportement légèrement différent à chaque lancement de celle-ci. Les valeurs du laser possèdant une limite de précision et le robot un temps de réaction il en resulte une marge d'erreur sur le respect de la distance de sécurités souhaitée. Cependant si la distance de sécurité n'est pas inférieure à 0.2 le resultat est satisfaisant.   
-->

<launch>

  <!-- Chargement de la description URDF du robot burger  -->
  <param name="robot_description" command="xacro --inorder $(find challenge_project)/urdf/turtlebot3_burger.urdf.xacro"/>

  <!-- Paramètre : nom du topic ou se trouve les informations du scanner (LIDAR) du robot -->
  <param name="topic_scan" value="/scan" />

  <!-- Paramètre : nom du topic ou se trouve les informations de vitesse pour le robot -->
  <param name="topic_velocity" value="/cmd_vel"/>

  <!-- Paramètre utilisateur : distance de sécurité (éxprimée en m)--> 
  <param name="safety_dist" type="double" value="0.2" />


  <!-- Position initiale du robot -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0.0175"/>
  <arg name="roll" default="0"/>
  <arg name="pitch" default="0"/>
  <arg name="yaw" default="3.14"/>

  <!-- Paramètres de simulation -->
  <arg name="world" default="empty"/> 
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
	<arg name="gui" default="true"/>
	<arg name="debug" default="false"/>
  
  <!-- Lancement du monde (et de gazebo) -->
  <!-- launch gazebo server and client from empty_world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
    <arg name="world_name" value="$(find challenge_project)/worlds/challenge2.world"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Lancement du robot dans le monde -->
  <node name="mybot_gazebo" pkg="gazebo_ros" 
        type="spawn_model" output="screen"
        args="-urdf -param robot_description -model mybot 
          		-x $(arg x) -y $(arg y) -z $(arg z)
      				-R $(arg roll) -P $(arg pitch) -Y $(arg yaw)" 
  />

  <!-- Lencement du noeud de mise en mouvement du mur-->
  <node pkg="challenge_project" name="obstacle_control" type="challenge2_task2_world_control.py" 
      output="screen" required="true" />

  <!-- Lencement du noeud de maintien à distance du mur  -->
  <node pkg="challenge_project" name="challenge2_task2_distanceFromWall" type="challenge2_task2_distanceFromWall.py" 
      output="screen" required="true" />

</launch>